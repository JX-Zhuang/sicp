; 2.1.1 有理数第算术运算
(define (add-rat x y)
    (make-rat (+ (* (numer x) (denom y)) 
                 (* (numer y) (denom x))) 
              (* (denom x) (denom y))))
(define (sub-rat x y)
    (make-rat (- (* (numer x) (denom y)) 
                 (* (numer y) (denom x))) 
              (* (denom x) (denom y))))
(define (mul-rat x y)
    (make-rat (* (numer x) (numer y)) 
              (* (denom x) (denom y))))
(define (div-rat x y)
    (make-rat (* (numer x) (denom y)) 
              (* (denom x) (numer y))))
(define (equal-rat? x y)
    (= (* (numer x) (denom y))
       (* (numer y) (denom x))))
(define x (cons 1 2))
(car x)
(cdr x)
(define y (cons 3 4))
(define z (cons x y))
(car (car z))
(car (cdr z))
(define (make-rat n d) (cons n d))
(define (numer x) (car x))
(define (denom x) (cdr x))
(define (print-rat x)
    (newline)
    (display (numer x))
    (display "/")
    (display (denom x)))
(define one-half (make-rat 1 2))
(print-rat one-half)
(define one-third (make-rat 1 3))
(define (gcd a b)
    (if (= b 0)
        a
        (gcd b (remainder a b))))
(define (make-rat n d)
    (let ((g (gcd n d)))
     (cons (/ n g) (/ d g))))
(print-rat (add-rat one-half one-third))
(print-rat (mul-rat one-half one-third))
(print-rat (add-rat one-third one-third))
; 练习 2.1
(define (make-rat n d)
    (if (< d 0)
        (cons (- n) (- d))
        (cons n d)))
; 2.1.2 抽象屏障
; 练习 2.2
(define (print-point p)
    (newline)
    (display "(")
    (display (x-point p))
    (display ",")
    (display (y-point p))
    (display ")"))
(define (make-segment start-point end-point)
    (cons start-point end-point))
(define (start-segment seg)
    (car seg))
(define (end-segment seg)
    (cdr seg))
(define (make-point x y)
    (cons x y))
(define (x-point point)
    (car point))
(define (y-point point)
    (cdr point))
(define (midpoint-segment seg)
    (let ((start (start-segment seg))
          (end (end-segment seg)))
          (make-point (average (x-point start) 
                               (x-point end)) 
                      (average (y-point start) 
                               (y-point end)))))
(define (average x y)
    (/ (+ x y) 2.0))
(define start (make-point 1 3))
(define end (make-point 4 3))
(define seg (make-segment start end))
(define mid (midpoint-segment seg))
(print-point mid)
; 练习 2.3
(define (perimeter-rectangle r)
    (let ((length (length-of-rectangle r))
          (width (width-of-rectangle r)))
          (* 2 (+ length width))))
(define (area-rectangle r)
    (* (length-of-rectangle r) (width-of-rectangle r)))
(define (make-rectangle length width)
    (cons length width))
(define (length-rectangle r)
    (car r))
(define (width-rectangle r)
    (cdr r))
(define (length-of-rectangle r)
    (let ((length (length-rectangle r)))
        (let ((start (start-segment length))
              (end (end-segment length)))
              (- (x-point end) (x-point start)))))
(define (width-of-rectangle r)
    (let ((width (width-rectangle r)))
        (let ((start (start-segment width))
              (end (end-segment width)))
              (- (y-point end) (y-point start)))))
(define l (make-segment (make-point 1 2) (make-point 4 2)))
(define w (make-segment (make-point 1 2) (make-point 1 4)))
(define r (make-rectangle l w))
(length-of-rectangle r)
(width-of-rectangle r)
(perimeter-rectangle r)
(area-rectangle r)