; (define (factorial n)
;     (if (= n 1)
;         1
;         (* n (factorial(- n 1)))))
; (factorial 6)

(define (factorial n)
    (define (factorial-iter product counter)
        (if (> counter n)
        product
            (factorial-iter (* product counter)
                (+ counter 1))))
    (factorial-iter 1 1))
(factorial 6)
; (define (inc a)
;     (+ a 1))
; (define (dec a)
;     (- a 1))
; (define (+ a b)
;     (if (= a 0)
;         b)
;         (inc (+ (dec a) b)))
; (define (+ a b)
;     (if (= a 0)
;         b)
;         (+ (dec a) (inc b)))

(define (A x y)
  (cond ((= y 0) 0)
        ((= x 0) (* 2 y))
        ((= y 1) 2)
        (else (A (- x 1)
                 (A x (- y 1))))))
(A 1 10)
(A 2 4)
(A 3 3)
; (define (fib n)
;     (cond ((= n 0) 0)
;           ((= n 1) 1)
;           (else (+ (fib (- n 1))
;                   (fib (- n 2))))))

(define (fib n)
    (fib-iter 1 0 n))
(define (fib-iter a b count)
    (if (= count 0)
        b
        (fib-iter (+ a b) a (- count 1))))

(fib 0)
(fib 1)
(fib 2)
